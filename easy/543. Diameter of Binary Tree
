 Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree

          1
         / \
        2   3
       / \     
      4   5    

Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them. 


c:
//当前节点的左节点最大深度加上右节点最大深度就是当前节点的最大直径，同时要比节该节点与其左右子节点的最大直径，这样遍历之后便可求出最大直径
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int diameterOfBinaryTree(struct TreeNode* root) {
    if(root==NULL) return 0;
    return max2((maxDepth(root->left)+maxDepth(root->right)),diameterOfBinaryTree(root->left),diameterOfBinaryTree(root->right));
}
int max2(int i,int j,int k){
    int maxmimum;
    maxmimum=i>j?i:j;
    maxmimum=maxmimum>k?maxmimum:k;
    return maxmimum;
}
int max(int i,int j){
    if(i>j) return i;
    return j;
}
int maxDepth(struct TreeNode* root){
    if(root==NULL) return 0;
    int lt=maxDepth(root->left);
    int rt=maxDepth(root->right);
    return max(lt,rt)+1;
}
