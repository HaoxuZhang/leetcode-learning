Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13

c:
//采用中序遍历：右根左的形式
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
struct TreeNode* convertBST(struct TreeNode* root) {
    if(root==NULL) return NULL;
    int cur=0;
    int* pre=&cur;
    order(root,pre);
    return root;
}
void order(struct TreeNode* root,int* pre){
    if(root->right) order(root->right,pre);
    if(*pre!=0) root->val+=*pre;
    *pre=root->val;
    if(root->left) order(root->left,pre);
}
