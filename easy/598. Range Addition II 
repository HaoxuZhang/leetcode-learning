Given an m * n matrix M initialized with all 0's and several update operations.

Operations are represented by a 2D array, and each operation is represented by an array with two positive integers a and b, which means M[i][j] should be added by one for all 0 <= i < a and 0 <= j < b.

You need to count and return the number of maximum integers in the matrix after performing all the operations.

Example 1:

Input: 
m = 3, n = 3
operations = [[2,2],[3,3]]
Output: 4
Explanation: 
Initially, M = 
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]

After performing [2,2], M = 
[[1, 1, 0],
 [1, 1, 0],
 [0, 0, 0]]

After performing [3,3], M = 
[[2, 2, 1],
 [2, 2, 1],
 [1, 1, 1]]

So the maximum integer in M is 2, and there are four of it in M. So return 4.

Note:

    The range of m and n is [1,40000].
    The range of a is [1,m], and the range of b is [1,n].
    The range of operations size won't exceed 10,000.

c:
//可以将数组转化为图形来看，有交集的那部分是最大的数，即在ops数组中标记的行的最小值和列的最小值为最大值区域，那么最大值的数量为最小行×最小列。
int maxCount(int m, int n, int** ops, int opsRowSize, int opsColSize) {
    if(opsRowSize==0||opsColSize==0) return m*n;
    int minX=INT_MAX; int minY=INT_MAX;
    for(int i=0;i<opsRowSize;i++)
    {
        if(minX>ops[i][0]) minX=ops[i][0];
        if(minY>ops[i][1]) minY=ops[i][1];    
    }
    return minX*minY;
}
