Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 



C:



利用递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int max(int i,int j){
    if(i>=j) return i;
    return j;
}
int abs(int i){
    if(i>=0) return i;
    return 0-i;
}
int depth(struct TreeNode* root){
    if(root==NULL) return 0;
    return (max(depth(root->left),depth(root->right))+1);
}
bool isBalanced(struct TreeNode* root) {
    if(root==NULL)  return true;
    int lt=depth(root->left);
    int rt=depth(root->right);
    return (abs(lt-rt)<=1)&&isBalanced(root->left)&&isBalanced(root->right);
}
