Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.

Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: True

Example 2:

Input: flowerbed = [1,0,0,0,1], n = 2
Output: False

Note:

    The input array won't violate no-adjacent-flowers rule.
    The input array size is in the range of [1, 20000].
    n is a non-negative integer which won't exceed the input array size.

c:
//如果一个位置是0并且它前面和后面都是0,那么就可以种花，注意首和尾的处理，首部为0并且其后也是0,则首部可以种花，尾部为0并且其前也是0,则尾部可以种花
bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n) {
    int sum=0;
    if(flowerbed[0]==0&&flowerbed[1]==0) 
    {
        flowerbed[0]=1;
        sum++;
    }
    for(int i=1;i<flowerbedSize-1;i++)
    {
        if(flowerbed[i-1]==0&&flowerbed[i]==0&&flowerbed[i+1]==0)
        {
            flowerbed[i]=1;
            sum++;
        }
    }
    if(flowerbed[flowerbedSize-1]==0&&flowerbed[flowerbedSize-2]==0)
    {
        flowerbed[flowerbedSize-1]=1;
        sum++;
    }
    if(sum>=n) return true;
    return false;
}
