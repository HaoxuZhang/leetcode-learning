Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than or equal to the node's key.
    The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
    Both the left and right subtrees must also be binary search trees.

For example:
Given BST [1,null,2,2],

   1
    \
     2
    /
   2

return [2].

Note: If a tree has more than one mode, you can return them in any order.

Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count). 

c++:
//设置一个map，key值为root的val，value值来统计该数出现的次数，最后找出second值最大的几个元素放入vector中返回即可
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<int,int> mp;
    int mx=0;
    void travel(TreeNode* root){
        if(root==NULL) return;
        mp[root->val]++;
        travel(root->left);
        travel(root->right);
    }
    vector<int> findMode(TreeNode* root) {
        vector<int> res;
        if(!root) return res;
        travel(root);
        unordered_map<int,int>::iterator p;
        for(p=mp.begin();p!=mp.end();p++){
            mx=max(mx,p->second);
        }
        for(p=mp.begin();p!=mp.end();p++){
            if(p->second==mx) res.push_back(p->first);
        }
        return res;
    }
};
