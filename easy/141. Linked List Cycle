 Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space? 



C:


//设置两个指针，slow每次走一步，fast每次走两步，若最后fast与slow所指向的是同一个对象，那么表示有循环，因为fast每次比slow多走一步，若存在循环，则一定会重合，当fast指向null或fast->next指向null说明链表没有循环
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) {
    struct ListNode *slow=head,*fast=head;
    while(true)
    {
        if(fast==NULL||fast->next==NULL) return false;
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast) break;
    }
    return true;
}
