You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11


c:


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int pathSum(struct TreeNode* root,int sum){
    if(root==NULL) return 0;
    return dfs(root,sum)+pathSum(root->left,sum)+pathSum(root->right,sum);//返回的值是当前节点为根点的路径数量加上左右节点为根点的路径数量
}
int dfs(struct TreeNode* root,int sum){ //该函数的作用是判断以当前节点为根点，共有多少条符合的路径
    if(root==NULL) return 0;
    int res=0;
    if(root->val==sum) res++;
    res+=dfs(root->left,sum-root->val);
    res+=dfs(root->right,sum-root->val);
    return res;
}
