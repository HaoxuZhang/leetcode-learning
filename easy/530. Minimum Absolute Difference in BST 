Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:

Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).

Note: There are at least two nodes in this BST. 

c:
//既然是二叉结构，那么采用中序遍历,由于C语言没有引用，因此要使用指针
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int min(int i,int j){
    if(i>j) return j;
    return i;
}
void inorder(struct TreeNode* root,int* pre,int* minDiff){
    if(root->left) inorder(root->left,pre,minDiff);
    if(*pre!=-1) *minDiff=min(*minDiff,(root->val)-*pre);
    *pre=root->val;
    if(root->right) inorder(root->right,pre,minDiff);
}
int getMinimumDifference(struct TreeNode* root) {
    int cur=-1;
    int* pre=&cur;
    int* minDiff;
    int max=INT_MAX;
    minDiff=&max;
    inorder(root,pre,minDiff);
    return max;
}
