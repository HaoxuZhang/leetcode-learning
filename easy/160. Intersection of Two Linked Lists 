Write a program to find the node at which the intersection of two singly linked lists begins.

For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3

begin to intersect at node c1.

Notes:

    If the two linked lists have no intersection at all, return null.
    The linked lists must retain their original structure after the function returns.
    You may assume there are no cycles anywhere in the entire linked structure.
    Your code should preferably run in O(n) time and use only O(1) memory.



C:

//思路：分别遍历两个链表，得到分别对应的长度。然后求长度的差值，把较长的那个链表向后移动这个差值的个数，然后一一比较即可。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {
    if(!headA||!headB) return NULL;
    int lenA=0,lenB=0;
    struct ListNode *tmpA,*tmpB;
    tmpA=headA;tmpB=headB;
//先用两个循环确定两个链表的长度
    while(tmpA!=NULL)
    {
        lenA++;
        tmpA=tmpA->next;
    }
    while(tmpB!=NULL)
    {
        lenB++;
        tmpB=tmpB->next;
    }
//不要忘记将两个临时指针重新指回两个链表的头    
    tmpA=headA;
    tmpB=headB;
//哪个链表较长，就将哪个链表的临时指针往后移动差值长度，然后两个指针同时一一比较即可
    if(lenA<lenB)
    {
        for(int i=0;i<lenB-lenA;i++)
            tmpB=tmpB->next;
    }
    else
    {
        for(int i=0;i<lenA-lenB;i++)
            tmpA=tmpA->next;
    }
    while(tmpA!=tmpB)//有两种情况使循环终止，第一种：遇到交点，第二种：没有交点，最终都指向NULL
    {
        tmpA=tmpA->next;
        tmpB=tmpB->next;
    }
    return tmpA;
}



解法二：从网上找的
思路：这道题还有一种特别巧妙的方法，虽然题目中强调了链表中不存在环，但是我们可以用环的思想来做，我们让两条链表分别从各自的开头开始往后遍历，当其中一条遍历到末尾时，我们跳到另一个条链表的开头继续遍历。两个指针最终会相等，而且只有两种情况，一种情况是在交点处相遇，另一种情况是在各自的末尾的空节点处相等。为什么一定会相等呢，因为两个指针走过的路程相同，是两个链表的长度之和，所以一定会相等。如果有交点，那么一定会先同时指向交点出，因为交点之后是共同的部分，是一样长的，只有前面的部分不一样长，此时两个指针走过的长度都是两个链表交点之前的长度之和+共同长度。如果没有交点，最后两个指针会同时指向NULL。


ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (!headA || !headB) return NULL;
        ListNode *a = headA, *b = headB;
        while (a != b) {
            a = a ? a->next : headB;
            b = b ? b->next : headA;
        }
        return a;
    }
