Given an integer array with even length, where different numbers in this array represent different kinds of candies. Each number means one candy of the corresponding kind. You need to distribute these candies equally in number to brother and sister. Return the maximum number of kinds of candies the sister could gain.

Example 1:

Input: candies = [1,1,2,2,3,3]
Output: 3
Explanation:
There are three different kinds of candies (1, 2 and 3), and two candies for each kind.
Optimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. 
The sister has three different kinds of candies. 

Example 2:

Input: candies = [1,1,2,3]
Output: 2
Explanation: For example, the sister has candies [2,3] and the brother has candies [1,1]. 
The sister has two different kinds of candies, the brother has only one kind of candies. 

Note:

    The length of the given array is in range [2, 10,000], and will be even.
    The number in given array is in range [-100,000, 100,000].

c:
//先对数组进行排序，然后从第1个数开始（有第0个数），判断该数跟前面的数是否相同，不同就res++，表示每种糖都取一个，如果res到了总长度的一半，则返回res，否则不能对半分了。最后要加上第一个数，所以res+1
void sort(int *a, int left, int right)
{
    if(left >= right)
    {
        return ;
    }
    int i = left;
    int j = right;
    int key = a[left];
     while(i < j)                              
    {
        while(i < j && key <= a[j])
        {
            j--;
        }
        a[i] = a[j];
        while(i < j && key >= a[i])
        {
            i++;
        }
        a[j] = a[i];
    }
     a[i] = key;
    sort(a, left, i - 1);
    sort(a, i + 1, right);

}
int distributeCandies(int* candies, int candiesSize) {
    sort(candies,0,candiesSize-1);
    int res=0;
    for(int i=1;i<candiesSize;i++)
    {
        if(candies[i]!=candies[i-1]) res++;
        if(res==candiesSize/2) return res;
    }
    return res+1;
}
