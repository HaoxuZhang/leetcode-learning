Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard like the image below.

American keyboard

Example 1:

Input: ["Hello", "Alaska", "Dad", "Peace"]
Output: ["Alaska", "Dad"]

Note:

    You may use one character in the keyboard more than once.
    You may assume the input string will only contain letters of alphabet.

c:
//我用的方法是分别设置flag数组，用来记录单词中的字母属于键盘上的哪一行，分别用123来标记，这样当标记完成之后，数组中的元素如果全部相同就表示所有字母在同一行。
/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
char** findWords(char** words, int wordsSize, int* returnSize) {
    int* len=malloc(sizeof(int)*wordsSize);
    int** flag=malloc(sizeof(int*)*wordsSize);
    char** p=malloc(sizeof(char*)*wordsSize);
    int num=0;
    for(int i=0;i<wordsSize;i++)
    {
        len[i]=strlen(words[i]);
        flag[i]=malloc(sizeof(int)*len[i]);
        for(int j=0;j<len[i];j++)
        {
            if(words[i][j]=='q'||words[i][j]=='w'||words[i][j]=='e'||words[i][j]=='r'||words[i][j]=='t'||words[i][j]=='y'||words[i][j]=='u'||words[i][j]=='i'||words[i][j]=='o'||words[i][j]=='p'||words[i][j]=='Q'||words[i][j]=='W'||words[i][j]=='E'||words[i][j]=='R'||words[i][j]=='T'||words[i][j]=='Y'||words[i][j]=='U'||words[i][j]=='I'||words[i][j]=='O'||words[i][j]=='P')
                flag[i][j]=1;
            if(words[i][j]=='a'||words[i][j]=='s'||words[i][j]=='d'||words[i][j]=='f'||words[i][j]=='g'||words[i][j]=='h'||words[i][j]=='j'||words[i][j]=='k'||words[i][j]=='l'||words[i][j]=='A'||words[i][j]=='S'||words[i][j]=='D'||words[i][j]=='F'||words[i][j]=='G'||words[i][j]=='H'||words[i][j]=='J'||words[i][j]=='K'||words[i][j]=='L')
                flag[i][j]=2;
            if(words[i][j]=='z'||words[i][j]=='x'||words[i][j]=='c'||words[i][j]=='v'||words[i][j]=='b'||words[i][j]=='n'||words[i][j]=='m'||words[i][j]=='Z'||words[i][j]=='X'||words[i][j]=='C'||words[i][j]=='V'||words[i][j]=='B'||words[i][j]=='N'||words[i][j]=='M')
                flag[i][j]=3;
        }
        bool judge=true;
        for(int j=0;j<len[i]-1;j++)
        {
            if(flag[i][j]!=flag[i][j+1])
            {
                judge=false;
                break;
            }
        }
        if(judge==true)
        {
            p[num]=malloc(sizeof(char)*len[i]);
            p[num++]=words[i];
        }
    }
    *returnSize=num;
    return p;
}
