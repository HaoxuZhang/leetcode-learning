

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]

c++:
//用一个二维vector数组存放所有节点的值。由上到下遍历所有节点，先左后右，把节点的值存放在二维数组中。最后返回一个vector二维数组，它是刚才二维数组的反转。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > res;
    void travel(TreeNode* root,int level){
        if(root==NULL) return;
        if(level==res.size()){
            vector<int> v;
            res.push_back(v);
        }
        res[level].push_back(root->val);
        travel(root->left,level+1);
        travel(root->right,level+1);
    }
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        travel(root,0);
        return vector<vector<int> >(res.rbegin(),res.rend());
    }
};
