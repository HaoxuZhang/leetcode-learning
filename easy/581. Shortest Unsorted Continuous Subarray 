Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:

Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.

Note:

    Then length of the input array is in range [1, 10,000].
    The input array may contain duplicates, so ascending order here means <=.

c:
//设置一个临时数组，将原数组复制到临时数组，然后对临时数组从小到大排序，排序后与原数组每个元素一一对比，对照中元素不相等的那段长度就是需要变动的长度。

int findUnsortedSubarray(int* nums, int numsSize) {
    int* tmp=malloc(sizeof(int)*numsSize);
    for(int i=0;i<numsSize;i++) //对原数组进行复制
        tmp[i]=nums[i];
    for(int i=0;i<numsSize-1;i++) //对临时数组排序
        for(int j=i+1;j<numsSize;j++)
            if(tmp[i]>tmp[j])
            {
                int change=tmp[i];
                tmp[i]=tmp[j];
                tmp[j]=change;
            }
    int i=0;
    int start=0,end=0;
    for(i=0;i<numsSize;i++) //寻找第一个不同元素的下标
        if(nums[i]!=tmp[i])
        {
            start=i;
            break;
        }
    if(i==numsSize) return 0; //注意极限情况，就是全部都相同，说明需要排序的长度为0,则返回0
    for(;i<numsSize;i++) //继续寻找最后一个不同元素之后的相同元素的下标
    {
        if(nums[i]==tmp[i]) //注意找到第一个相同元素后，需要判断从这个元素到尾部，是否所有元素都相同，全部相同才行，因为中间有可能会有相同情况，例如2,6,4,8,10,9,15
        {
            bool flag=true;
            for(int j=i;j<numsSize;j++) //如果后面有不同的，标志为设置为false
            {
                if(nums[j]!=tmp[j])
                    flag=false;
            }
            if(flag==true)
            {
                end=i;
                break;
            }
        }
    }
    if(i==numsSize) end=numsSize; //注意极限情况，当遍历整个数组后仍然没有相同元素，此时end没有被赋值，需要将end赋值为numsSize
    return (end-start);
}
