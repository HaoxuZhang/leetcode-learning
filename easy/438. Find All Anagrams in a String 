Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

c++:
//先统计p字符串中每个字符出现的次数，然后在s中以p的长度位长度，不断循环判断是否出现次数相同。如果出现次数不同，终止循环。
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        int lens=s.size(),lenp=p.size();
        vector<int> res;
        vector<int> cnt(128,0);
        for(int i=0;i<lenp;i++){
            cnt[p[i]]++;
        }
        int i=0;
        while(i<=lens-lenp){
            bool flag=true;
            vector<int> tmp=cnt;
            for(int j=i;j<i+lenp;j++){
                if(--tmp[s[j]]<0){
                    flag=false;
                    break;
                }
            }
            if(flag==true)
                res.push_back(i);
            i++;
        }
        return res;
    }
};
