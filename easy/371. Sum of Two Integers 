Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.

Example:
Given a = 1 and b = 2, return 3. 

c:

//思路: 这里用到了一个半加法的思想, 即两位单独的位相加其结果可以用异或得到, 进位可以用与得到. 然后对于两个数字来说同样可以延伸这个思想. 

举个例子: 11+5, 其二进制形式为11: 1011, 5: 0101

1. 那么两个位置都为1的地方就需要进位, 所以进位值就为0001. 原位置两个数相加的结果为那个位置值的异或即1110, 即两个位置值如果不一样就为1, 一样的话要么两个位置原来值都为0结果也为0, 要么进位, 那么结果依然是0. 

2. 接下来就要把进位位和下一位相加, 所以进位值左移一位,即0001变为0010, 重复上面操作可得新的进位值为0010, 原位置异或(即相加)结果为1100.

3. 继续重复上面操作直到进位为0, 可得到最终结果10000, 即16
//可以用二进制的思维，同位相加后得到的该位上的数字是两个数字的异或（1+1=0,1+0=1,0+0=0），进制位是两个数字的与（1+1=1），将进制位向左移动一位后再与刚才的异或值相加，反复循环直到进制位都是0

int getSum(int a, int b) {
    int carry;
    while(b)
    {
        carry=a&b;//carry来表示进制位
        a=a^b;//将该位的数字赋值给a
        b=carry<<1;//b是进制位向左移动一位
    }
    return a;
}
