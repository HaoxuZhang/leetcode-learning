We define a harmonious array is an array where the difference between its maximum value and its minimum value is exactly 1.

Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible subsequences.

Example 1:

Input: [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].

Note: The length of the input array will not exceed 20,000. 

c:
//先对数组进行排序，然后从第一个元素开始，判断从当前元素开始harmonious array的长度，并用一个len数组记录下来，一直到倒数第二个元素都要记录，然后判断len数组中的最大值即可
void sort(int *a, int left, int right)
{
    if(left >= right)
    {
        return ;
    }
    int i = left;
    int j = right;
    int key = a[left];
    while(i < j)                              
    {
        while(i < j && key <= a[j])
        {
            j--;
        }
        a[i] = a[j];
        while(i < j && key >= a[i])
        {
            i++;
        }
        a[j] = a[i];
    }
     a[i] = key;
    sort(a, left, i - 1);
    sort(a, i + 1, right);
}

int findLHS(int* nums, int numsSize) {
    if(numsSize<=1) return 0;
    sort(nums,0,numsSize-1);
    int* len=malloc(sizeof(int)*numsSize-1);
    for(int i=0;i<numsSize-1;i++)
    {
        bool flag=false;
        for(int j=i+1;j<numsSize;j++)
        {
            if(nums[j]-nums[i]==1) //找到差值为1的元素
            {
                flag=true;
                len[i]=j-i+1;
            }
            else if(nums[j]-nums[i]>1) break;
        }
        if(flag==false) len[i]=0; //如果没找到，则表示没有，存入0
    }
    int max=INT_MIN;
    for(int i=0;i<numsSize-1;i++)
        if(max<len[i])
            max=len[i];
    return max;
}
