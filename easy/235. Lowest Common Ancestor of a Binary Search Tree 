 Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5

For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.


c:

//解题思路：使用递归
//这是个BST，若所给两个数都小于root，则LCA一定在root左分支，都大于root，一定在root右分支，如果一大一小，那LCA就是root。依次规律递归。不要忘记如果两个数中的任何一个等于root的话，LCA就是root

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {
    if(root->val>p->val&&root->val>q->val)
        return lowestCommonAncestor(root->left,p,q);
    if(root->val<p->val&&root->val<q->val)
        return lowestCommonAncestor(root->right,p,q);
    return root;
}
