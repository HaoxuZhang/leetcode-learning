Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.


C++:
//用sort排序后，看每个元素的出现次数
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<int>::iterator p;
        int count=0;
        for(p=nums.begin();p!=nums.end();p+=count){
            count=0;
            vector<int>::iterator left,right;
            left=p;
            right=p;
            while(*right==*left&&right!=nums.end()){
                count++;
                right++;
            }
            if(count>nums.size()/2){
                return *p;
                break;
            }
        }
        return 0;
    }
};

